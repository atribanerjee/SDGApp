@model SDGApp.ViewModel.UserViewModel
@using (Html.BeginForm("Settings", "Account", FormMethod.Post, new { @class = "form-horizontal" }))
{
    <div class="position-center">
        <div class="prf-contacts sttng">
            <h2>  Personal Information</h2>
        </div>
        <div class="form-group">
            @Html.HiddenFor(m => m.UserID)
            @Html.HiddenFor(m => m.IsActive)
            @Html.HiddenFor(m => m.UserRoleID)
            @Html.HiddenFor(m => m.Email)
            @Html.HiddenFor(m => m.UserName)
            @Html.HiddenFor(m => m.UserTypeID)
            <label class="col-lg-2 control-label">First Name<span class="" style="color:red"> *</span></label>
            <div class="col-lg-6">

                @Html.TextBoxFor(m => m.FirstName, new { @placeholder = "First Name", @id = "c-name", @class = "form-control" })
                @Html.ValidationMessageFor(m => m.FirstName)
            </div>
        </div>

        <div class="form-group">
            <label class="col-lg-2 control-label">Last Name<span class="" style="color:red"> *</span></label>
            <div class="col-lg-6">
                @Html.TextBoxFor(m => m.LastName, new { @placeholder = "Last Name", @id = "c-name", @class = "form-control" })
                @Html.ValidationMessageFor(m => m.LastName)
            </div>
        </div>

        <div class="form-group">
            <label class="col-lg-2 control-label">Country<span class="" style="color:red"> *</span></label>
            <div class="col-lg-6">
                @Html.DropDownListFor(m => m.CountryID, Model.CountryNameList, "--Select Country--", new { style = "width:250px", @onchange = "CountryChange(this.value);", @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            <label class="col-lg-2 control-label">State / Province<span class="" style="color:red"> *</span></label>
            <div class="col-lg-6">
                @Html.DropDownListFor(m => m.State, Model.StateNameList, "--Select State--", new { style = "width:250px", @onchange = "StateChange(this.value);", @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            <label class="col-lg-2 control-label">City<span class="" style="color:red"> *</span></label>
            <div class="col-lg-6">
                @Html.DropDownListFor(m => m.City, Model.CityNameList, "--Select City--", new { style = "width:250px", @class = "form-control" })
            </div>
        </div>

        <div class="form-group">
            <label class="col-lg-2 control-label">Zip / Postal Code<span class="" style="color:red"> *</span></label>
            <div class="col-lg-6">
                @Html.TextBoxFor(m => m.Zip, new { @placeholder = "Zip / Postal Code", @id = "c-name", @class = "form-control numeric" })
                @Html.ValidationMessageFor(m => m.Zip)
            </div>
        </div>

        <div class="form-group">
            <label class="col-lg-2 control-label">Organisation</label>
            <div class="col-lg-6">
                @Html.TextBoxFor(m => m.Company, new { @placeholder = "Organisation", @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Company)
            </div>
        </div>


        <div class="prf-contacts sttng" style="display:none">
            <h2> socail networks</h2>
        </div>
        <div style="display:none">
            <div class="form-group">
                <label class="col-lg-2 control-label">Facebook</label>
                <div class="col-lg-6">
                    @Html.TextBoxFor(m => m.Facebook, new { @placeholder = "Facebook", @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Facebook)
                </div>
            </div>
            <div class="form-group">
                <label class="col-lg-2 control-label">Twitter</label>
                <div class="col-lg-6">
                    @Html.TextBoxFor(m => m.Twitter, new { @placeholder = "Twitter", @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Twitter)
                </div>
            </div>

            <div class="form-group">
                <label class="col-lg-2 control-label">Google plus</label>
                <div class="col-lg-6">
                    @Html.TextBoxFor(m => m.GooglePlus, new { @placeholder = "Google plus", @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.GooglePlus)
                </div>
            </div>

            <div class="form-group">
                <label class="col-lg-2 control-label">Flickr</label>
                <div class="col-lg-6">
                    @Html.TextBoxFor(m => m.Flickr, new { @placeholder = "Flickr", @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Flickr)
                </div>
            </div>

            <div class="form-group">
                <label class="col-lg-2 control-label">Youtube</label>
                <div class="col-lg-6">
                    @Html.TextBoxFor(m => m.Youtube, new { @placeholder = "Youtube", @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Youtube)
                </div>
            </div>

        </div>
        <div class="prf-contacts sttng">
            <h2>Contact</h2>
        </div>
        <div>

            <div class="form-group">
                <label class="col-lg-2 control-label">Address<span class="" style="color:red"> *</span></label>
                <div class="col-lg-6">
                    @Html.TextAreaFor(m => m.Address, new { @placeholder = "Address", @id = "c-name", @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Address)
                </div>
            </div>

            <div class="form-group">
                <label class="col-lg-2 control-label">Phone</label>
                <div class="col-lg-6">
                    @Html.TextBoxFor(m => m.Phone, new { @placeholder = "Phone", @class = "form-control numeric" })
                    @Html.ValidationMessageFor(m => m.Phone)
                </div>
            </div>

            <div class="form-group">
                <label class="col-lg-2 control-label">Mobile</label>
                <div class="col-lg-6">
                    @Html.TextBoxFor(m => m.MobileNo, new { @placeholder = "Mobile", @class = "form-control numeric" })
                    @Html.ValidationMessageFor(m => m.MobileNo)
                </div>
            </div>

            <div class="form-group" style="display:none;">
                <label class="col-lg-2 control-label">Skype</label>
                <div class="col-lg-6">
                    @Html.TextBoxFor(m => m.Skype, new { @placeholder = "Skype", @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Skype)
                </div>
            </div>
            <div class="form-group">
                <label class="col-lg-2 control-label">Gender<span class="" style="color:red"> *</span></label>
                <div class="col-lg-6">
                    @Html.DropDownListFor(m => m.Gender, Model.GenderNameList, "--Select Gender--", new { style = "width:250px", @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                <label class="col-lg-2 control-label">Unit<span class="" style="color:red"> </span></label>
                <div class="col-lg-6">
                    @*@Html.DropDownListFor(m => m.UnitNameID, Model.UnitNameList, new { style = "width:250px",@onchange= "fnSelectUnit(this)", @id = "selectunit",  @class = "form-control" })*@

                    @foreach (var item in Model.UnitNameList)
                    {
                        @item.Text
                        @Html.RadioButtonFor(m => m.UnitNameID, item.Value, new { @class = "selectunit", @alt = "" + item.Text + "", @onchange = "fnSelectUnit('" + item.Text + "')" })
                    }

                </div>
            </div>
            <div class="form-group">
                <label class="col-lg-2 control-label">Height</label>
                <div class="col-lg-6">
                    @Html.TextBoxFor(m => m.Height, new { @placeholder = "Height", @class = "form-control numeric", @id = "userheight" })
                    @Html.ValidationMessageFor(m => m.Height)

                </div>
                <input id="heightunit" type="text" class="form-control" name="unit" style="width:65px;" value="M" readonly>
            </div>
            <div class="form-group">
                <label class="col-lg-2 control-label">Weight</label>
                <div class="col-lg-6">
                    @Html.TextBoxFor(m => m.Weight, new { @placeholder = "Weight", @class = "form-control numeric", @id = "userweight" })
                    @Html.ValidationMessageFor(m => m.Weight)
                </div>
                <input id="weightunit" type="text" class="form-control" style="width:65px;" name="unit" value="KG" readonly>
            </div>
            @*<div class="form-group">
            <label class="col-lg-2 control-label">Race</label>
            <div class="col-lg-6">
                @Html.TextBoxFor(m => m.Race, new { @placeholder = "Race", @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Race)
            </div>
        </div>*@
            @*<div class="form-group">
                <label class="col-lg-2 control-label">Skin Type</label>
                <div class="col-lg-6">
                    <div class="color-hold">
                        <select id="SkinType" name="SkinType" class="form-control" onchange="SkinTypeChange(this.value);">
                            @if (Model.SkinType == "#8d5524")
                            {
                                @:
                                <option selected="selected" style="background-color:#8d5524; color:#ffffff" value="#8d5524">#8d5524</option>
                            }
                            else
                            {
                                @:
                                <option style="background-color:#8d5524; color:#ffffff" value="#8d5524">#8d5524</option>
                            }

                            @if (Model.SkinType == "#c68642")
                            {
                                @:
                                <option selected="selected" style="background-color:#c68642; color:#ffffff" value="#c68642">#c68642</option>
                            }
                            else
                            {
                                @:
                                <option style="background-color:#c68642; color:#ffffff" value="#c68642">#c68642</option>
                            }

                            @if (Model.SkinType == "#e0ac69")
                            {
                                @:
                                <option selected="selected" style="background-color:#e0ac69; color:#ffffff" value="#e0ac69">#e0ac69</option>
                            }
                            else
                            {
                                @:
                                <option style="background-color:#e0ac69; color:#ffffff" value="#e0ac69">#e0ac69</option>
                            }

                            @if (Model.SkinType == "#f1c27d")
                            {
                                @:
                                <option selected="selected" style="background-color:#f1c27d; color:#ffffff" value="#f1c27d">#f1c27d</option>
                            }
                            else
                            {
                                @:
                                <option style="background-color:#f1c27d; color:#ffffff" value="#f1c27d">#f1c27d</option>
                            }

                            @if (Model.SkinType == "#ffdbac")
                            {
                                @:
                                <option selected="selected" style="background-color:#ffdbac; color:#ffffff" value="#ffdbac">#ffdbac</option>
                            }
                            else
                            {
                                @:
                                <option style="background-color:#ffdbac; color:#ffffff" value="#ffdbac">#ffdbac</option>
                            }
                        </select>
                        @if (Model.SkinType != null)
                        {
                            <span id="spnSelectedSkinType" class="showskincolor" style="background:@Model.SkinType;"></span>
                        }
                        else
                        {
                            <span id="spnSelectedSkinType" class="showskincolor" style="background:#8d5524;"></span>
                        }

                    </div>
                </div>
            </div>*@

            <div class="form-group form-group-skin">
                <label class="col-lg-3 control-label">Skin Type</label>
                <div class="col-lg-6">
                    <div class="color-hold">
                        <div class="skin-option-radio">
                            @if (Model.SkinType == "#8d5524")
                            {
                                <label class="radio-inline coption1 active">
                                    <input type="radio" name="skincolor" id="inlineRadio1" onchange="SkinTypeChange(this);" value="#8d5524">
                                </label>
                            }
                            else
                            {
                                <label class="radio-inline coption1">
                                    <input type="radio" name="skincolor" id="inlineRadio1" onchange="SkinTypeChange(this);" value="#8d5524">
                                </label>
                            }
                            @if (Model.SkinType == "#c68642")
                            {
                                <label class="radio-inline coption2 active">
                                    <input type="radio" name="skincolor" id="inlineRadio2" onchange="SkinTypeChange(this);" value="#c68642">
                                </label>
                            }
                            else
                            {
                                <label class="radio-inline coption2">
                                    <input type="radio" name="skincolor" id="inlineRadio2" onchange="SkinTypeChange(this);" value="#c68642">
                                </label>
                            }
                            @if (Model.SkinType == "#e0ac69")
                            {
                                <label class="radio-inline coption3 active">
                                    <input type="radio" name="skincolor" id="inlineRadio3" onchange="SkinTypeChange(this);" value="#e0ac69">
                                </label>
                            }
                            else
                            {
                                <label class="radio-inline coption3">
                                    <input type="radio" name="skincolor" id="inlineRadio3" onchange="SkinTypeChange(this);" value="#e0ac69">
                                </label>
                            }
                            @if (Model.SkinType == "#f1c27d")
                            {
                                <label class="radio-inline coption4 active">
                                    <input type="radio" name="skincolor" id="inlineRadio4" onchange="SkinTypeChange(this);" value="#f1c27d">
                                </label>
                            }
                            else
                            {
                                <label class="radio-inline coption4">
                                    <input type="radio" name="skincolor" id="inlineRadio4" onchange="SkinTypeChange(this);" value="#f1c27d">
                                </label>
                            }
                            @if (Model.SkinType == "#ffdbac")
                            {
                                <label class="radio-inline coption5 active">
                                    <input type="radio" name="skincolor" id="inlineRadio5" onchange="SkinTypeChange(this);" value="#ffdbac">
                                </label>
                            }
                            else
                            {
                                <label class="radio-inline coption5">
                                    <input type="radio" name="skincolor" id="inlineRadio5" onchange="SkinTypeChange(this);" value="#ffdbac">
                                </label>
                            }

                            

                        </div>
                    </div>
                </div>
            </div>


            <div class="form-group">
                <div class="col-lg-offset-2 col-lg-10">
                    <button class="btn btn-primary" type="submit"><i class="fa fa-save"></i>&nbsp;Save</button>
                    @Html.ActionLink("Cancel", "Index", "Dashboard", new { }, new { @class = "btn btn-danger" })
                </div>
            </div>
        </div>
    </div>

}

@section Scripts
{
    <script>

        function CountryChange(strCountry) {

            $("#State").empty();
            $("#City").empty();
            $("#City").append('<option value="0">--Select City--</option>');
            $.ajax({
                type: 'Get',
                data: { CountryID: $('#CountryID').val() },
                url: '@Url.Action("GetStates", "Account")', // we are calling json method
                dataType: 'json',
                // here we are get value of selected country and passing same value
                //as inputto json method GetStates.
                success: function (states) {
                    // states contains the JSON formatted list
                    // of states passed from the controller
                    $("#State").append('<option value="0">--Select State--</option>');
                    $.each(states, function (i, state) {
                        $("#State").append('<option value="' + state.ID + '">' +
                             state.StateName + '</option>');
                        // here we are adding option for States
                    });

                },
                error: function (ex) {

                    alert('Failed to retrieve states.' + ex);
                }

            });

        }

        function StateChange(strState) {
            $("#City").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetCity","Account")',
                dataType: 'json',
                data: { StateId: $('#State').val() },
                success: function (citys) {
                    // states contains the JSON formatted list
                    // of states passed from the controller
                    //$("#City").append('<option value="0">--Select City--</option>');
                    $.each(citys, function (i, city) {
                        $("#City").append('<option value="'
                              + city.ID + '">'
                              + city.CityName + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }

            });
        }


        //function SkinTypeChange(event) {

        //    if (selectedColor.length > 0) {
        //       // $('#spnSelectedSkinType').css({ 'background': selectedColor });
        //        $(".radio-inline").removeClass('active');

        //        $(event).addClass('active');

        //    }
        //}



    </script>
}
<script>
    fnSelectUnit(null);

    function fnSelectUnit(event) {
        
        if (event != null) {
            //var selectedtext = $(event).find("option:selected").text();
            var userheight =parseFloat($("#userheight").val());
            var userweight = parseFloat($("#userweight").val());
            
            var selectedtext = event;
            if (selectedtext == 'Metric') {
                var convervalheight = (userheight * 0.0254).toFixed(2);
                var convervalweight = (userweight * 0.453592).toFixed(2);
                $("#userheight").val(convervalheight);
                $("#userweight").val(convervalweight);
                $("#heightunit").val("M");
                $("#weightunit").val("KG");
            } else {
                
                //else "Imperial"
                var convervalheight = (userheight * 39.3701).toFixed(2);
                var convervalweight = (userweight * 2.20462).toFixed(2);
                $("#userheight").val(convervalheight);
                $("#userweight").val(convervalweight);

                $("#heightunit").val("Inch");
                $("#weightunit").val("Pound");
            }
        } else {
            
            var selectedtext = $(".selectunit:checked").attr('alt');
          
            if (selectedtext == 'Metric') {
               
                $("#heightunit").val("M");
                $("#weightunit").val("KG");
            } else {

                //else "Imperial"
                $("#heightunit").val("Inch");
                $("#weightunit").val("Pound");
            }
        }

    }

    function SkinTypeChange(event) {
      
        $(".radio-inline").removeClass('active');

        $(event).parent().addClass('active');
       
    }
</script>

