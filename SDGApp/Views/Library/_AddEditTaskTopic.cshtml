@model SDGApp.ViewModel.LibraryViewModel

@{
    int TaskID = ViewBag.TaskID;
    var title = " ";
}

@if (Model.WorkFlag == "Add SubTask")
{
    title = "Add Sub Task";
}
else if (Model.WorkFlag == "Edit SubTask")
{
    title = "Edit Sub Task";
}
else
{
    title = Model.WorkFlag;
}

<h4 class="modal-title" id="myModalLabel">@title</h4>

<div class="modal-dialog" role="document">
    <div class="modal-content">

        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><i class="fa fa-times" aria-hidden="true"></i></button>
            <h4 class="modal-title" id="myModalLabel">@title</h4>
        </div>

        <div class="modal-body">


            @using (Ajax.BeginForm("AddEditTopicTask", "Library", new { Flag = Model.WorkFlag }, new AjaxOptions { UpdateTargetId = "dvSubtask", HttpMethod = "POST", OnSuccess = "TopicAdditionsuccess()" }, new { }))
            {
                <div class="panel-body">
                    @Html.HiddenFor(model => model.WorkID)
                    @Html.Hidden("UploadFile")

                    <div class="form-group">
                        <div class="col-lg-1"></div>
                        <div class="col-lg-10">
                            @Html.LabelFor(model => model.OrderID, new { @class = "control-label" })
                            @Html.TextBoxFor(model => model.OrderID, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.OrderID)
                        </div>
                        <div class="col-lg-1"></div>
                    </div>

                    <div class="form-group">
                        <div class="col-lg-1"></div>
                        <div class="col-lg-10">
                            @Html.LabelFor(model => model.WorkName, new { @class = "control-label" })
                            @Html.TextBoxFor(model => model.WorkName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.WorkName)
                        </div>
                        <div class="col-lg-1"></div>
                    </div>
                    @if (Model.WorkFlag.ToLower().Contains("topic"))
                    {
                        @*<div class="form-group">
                                <div class="col-lg-1"></div>
                                <div class="col-lg-10">
                                    @Html.LabelFor(model => model.TopicWidth, new { @class = "control-label" })
                                    @Html.TextBoxFor(model => model.TopicWidth, new { @class = "form-control", @placeholder = "Must be less than 6" })
                                    @Html.ValidationMessageFor(model => model.TopicWidth)
                                </div>
                                <div class="col-lg-1"></div>
                            </div>*@
                    }
                    <div class="form-group">
                        <div class="col-lg-1"></div>
                        <div class="col-lg-10">
                            @Html.LabelFor(model => model.WorkDescription, new { @class = "control-label" })
                            @Html.TextBoxFor(model => model.WorkDescription, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.WorkDescription)
                        </div>
                        <div class="col-lg-1"></div>
                    </div>

                    @if (Model.WorkFlag.ToLower().Contains("task"))
                    {
                        <div class="form-group none">
                            <div class="col-lg-1"></div>
                            <div class="col-lg-10">
                                @Html.LabelFor(model => model.WorkParentID, new { @class = "control-label" })
                                @Html.DropDownListFor(model => model.WorkParentID, Model.DDLTopic, "--Select--", new { @class = "form-control" })
                            </div>
                            <div class="col-lg-1"></div>
                        </div>
                        @Html.HiddenFor(model => model.WorkParentID);
                        <div class="form-group">
                            <div class="col-lg-1"></div>
                            <div class="col-lg-10">
                                @Html.LabelFor(model => model.WorkParentID, new { @class = "control-label" })
                                <input class="form-control" placeholder="Selected Parent ID For Edit" disabled="" value="@Model.ParentText">
                            </div>
                            <div class="col-lg-1"></div>
                        </div>

                        <div class="form-group">
                            <div class="col-lg-1"></div>
                            <div class="col-lg-10">
                                @Html.LabelFor(model => model.Note, new { @class = "control-label" })
                                @Html.TextAreaFor(model => model.Note, new { @class = "form-control" })
                            </div>
                            <div class="col-lg-1"></div>
                        </div>

                        if (Model.WorkFlag.ToLower().Contains("edit"))
                        {
                            @*<div class="form-group">
                                    <div class="col-lg-1"></div>
                                    <div class="col-lg-10">
                                        @Html.LabelFor(model => model.Percentage, new { @class = "control-label" })
                                        <input name="TaskPercentage" type="range" min="0" max="100" value="@Model.Percentage" class="slider" id="TaskPercentage" oninput="putvalue(this.value);">
                                        <p>Value: <span id="rangevalue">@Model.Percentage</span></p>
                                    </div>
                                    <div class="col-lg-1"></div>
                                </div>*@
                        }
                        else
                        {
                            @*<input name="TaskPercentage" type="range" min="0" max="0" id="TaskPercentage" style="display:none">*@
                        }

                        <div class="row up-down">
                            <div class="col-lg-1"></div>
                            <div class="col-lg-5 text-center">
                                <div class="form-group">
                                    <div class="col-lg-12 no-pad">
                                        <label class="control-label">Files Upload</label>
                                        <div class="fileupload fileupload-new" data-provides="fileupload">
                                            <span class="btn btn-info btn-file">
                                                <span class="fileupload-new"><i class="fa fa-paper-clip"></i> Add File</span>
                                                <span class="fileupload-exists"><i class="fa fa-undo"></i> Change</span>
                                                <input type="file" name="files" id="file" multiple="multiple" onchange="readmultifiles(this.files)" />
                                            </span>
                                            @*<span class="fileupload-preview"></span> - style="float: none; margin-left:5px;" *@
                                            <a href="#" class="close fileupload-exists" data-dismiss="fileupload"></a>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group edit-group" id="ImgUpload">

                                    <!-- single file or more that single file loop START -->
                                    <!-- single file or more that single file loop END -->

                                </div>

                            </div>



                            @if (!string.IsNullOrEmpty(Model.FileName))
                            {
                                var arrfile = Model.FileName.Split(',');
                                <div class="col-lg-5 text-center">
                                    <div class="form-group">
                                        <div class="col-lg-12 no-pad">
                                            <label class="control-label">Files Download</label>
                                            <ul class="list-group">
                                                @foreach (var item in arrfile)
                                                {
                                                    var filename = item.Length < 6 ? item : item.Substring(0, 10) + "...";
                                                    <li class="list-group-item">
                                                        <a href="~/Content/LibraryDocument/@item" download="download" class="item-name ">@filename</a>
                                                        <a href="javascript:void(0)" onclick="DeleteUploadedFile('@item')" class="item-action ">
                                                            <i class="fas fa-trash-restore-alt" data-toggle="tooltip" data-placement="left" title="Remove"></i>
                                                        </a>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            }
                            <div class="col-lg-1"></div>
                        </div>

                    }
                    else
                    {
                        @*<input name="TaskPercentage" type="range" min="0" max="0" id="TaskPercentage" style="display:none">*@
                    }


                    <div class="form-group">
                        <div class="col-lg-1"></div>
                        <div class="col-lg-10 text-center">
                            <button type="button" class="btn btn-success" data-dismiss="modal">Close</button>
                            <button id="btnSubmit" class="btn btn-danger" type="submit">Save</button>
                        </div>
                        <div class="col-lg-1"></div>
                    </div>


                </div>
            }


        </div>

    </div>
</div>


<script type="text/javascript">

    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    });

    function TopicAdditionsuccess() {
        $('div#modalAddEdit').modal('hide');
        LoadTopicSubTasksDiv();
    }

    function DeleteUploadedFile(filename) {
        var cofirmmessage = 'Are you sure you want to delete this?';
        var successmessage = 'Data deleted successfully.';
        var $element = $(this);
        customConfirm({ message: cofirmmessage },

        function (retunVal) {
            $.ajax({
                type: 'POST',
                data: { "filename": filename },
                url: '@Url.Action("DeleteUploadedFile", "Library")',
                dataType: 'json',
                success: function (data) {
                    if (data.Result) {
                        showalertpopup(data.Message);
                    }
                    else {
                        showalertpopup(data.Message);
                    }
                },
                error: function (arg) {
                    showalertpopup("Error");
                },
                complete: function () {
                }
            });
        },
        function (retunVal) {
            showalertpopup('No data was deleted.');
        });
    }

    // IMAGE PROCESSING
    function readmultifiles(files) {
        var arrImages = new Array(); // stores all image names
        var div = document.querySelector("#ImgUpload");

        function setup_reader(file) {

            var filename = file.name;
            var name = file.name.split('.')[0].replace(' ', '');
            var reader = new FileReader();
            reader.onload = function (e) {
                var picFile = e.target;
                // get file content
                var bin = e.target.result;

                div.innerHTML = div.innerHTML + '<input class="form-control edit-control" value="' + name + '" type="text" name="Uploadfilename" placeholder="' + name + '"/>';
                //console.log(name);
            }

            reader.readAsDataURL(file);
        }

        for (var i = 0; i < files.length; i++) {
            setup_reader(files[i]);
            ////////////////////////////
        }


        if (files.length > 0) {
            if (window.FormData !== undefined) {

                for (var x = 0; x < files.length; x++) {
                    var data = new FormData();
                    data.append("file" + x, files[x]);

                    $.ajax({
                        type: "POST",
                        url: '/Library/UploadLibraryFile',
                        contentType: false,
                        processData: false,
                        data: data,
                        success: function (result) {
                            console.log(result);
                            console.log(result.FileName);
                            //setup_reader(files[x]);
                            arrImages.push(result.FileName);
                            $("#UploadFile").val(arrImages);
                        },
                        error: function (xhr, status, p3, p4) {
                            var err = "Error " + " " + status + " " + p3 + " " + p4;
                            if (xhr.responseText && xhr.responseText[0] == "{")
                                err = JSON.parse(xhr.responseText).Message;
                            console.log(err);
                        }
                    });

                }


            } else {
                showalertpopup("This browser doesn't support HTML5 file uploads!");
            }
        }

    }

</script>
