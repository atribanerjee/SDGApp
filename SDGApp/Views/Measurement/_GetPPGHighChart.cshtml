@model SDGApp.ViewModel.MeasurementViewModel
@{
    string Ppg = Model.PpgValues;
}



<div id="ppg" style="min-width: 310px; height: 300px; margin: 0 auto"></div>

<script>
    (function(H) {
        H.wrap(H.Series.prototype, 'getClipBox', function(proceed, animation, finalBox) {
            var result = proceed.apply(this, Array.prototype.slice.call(arguments, 1));

            if (finalBox) {
                return {
                    x: 0,
                    width: this.chart.plotWidth
                }
            }

            return result;
        });
   
    }(Highcharts));


    var xValues = [];
    xValues = [@Ppg];


    const drawAnimationDuration1 = 2000;
    var chart = Highcharts.chart('ppg', {
        chart: {
            type: 'line',
            zoomType: 'xy',
            panning: true,
            panKey: 'shift',      
            scrollablePlotArea: {
                minWidth: 200,
                scrollPositionX: 0
            }
        },
         mapNavigation: {
                enableMouseWheelZoom: true
            },
        credits: {
            enabled: false
        },
        title: {
            text: ''
        },
        subtitle: {
            text: ''
        },
        xAxis: {
            lineWidth: 0,
            minorGridLineWidth: 0,
            lineColor: 'transparent',
            crosshair: false
        },
        yAxis: {
            gridLineWidth: 0,
            minorGridLineWidth: 0,
            title: {
                text: 'PPG Peaks'
            }
        },
        tooltip: {
            enabled: false
        },
        plotOptions: {
            column: {
                pointPadding: 0.2,
                borderWidth: 0
            }
        },
        series: [{
            name: '',
            cropThreshold: 9e9,
            //  lineWidth: 1,
            data: xValues,
            animation: {
                duration: drawAnimationDuration1,
                easing: function(t) {
                    return t;
                }
            }
        }]
    });

    var delay = drawAnimationDuration1 / chart.plotWidth * chart.plotSizeX;

    setTimeout(() => {
        $('.highcharts-scrolling').animate({
            scrollLeft: $('.highcharts-container').width()
        }, drawAnimationDuration1, 'linear');
    }, delay)
</script>
