@model SDGApp.ViewModel.AttributeRuleViewModel
@{
    ViewBag.Title = "Edit Rule";
}

@{Html.RenderPartial("_Breadcrumbs"); }

<div class="row">
    <div class="col-md-12">
        <section class="panel user attr-rule">
            <header class="panel-heading">
                Add Attribute Rule
            </header>
            <div class="success-message">
                @if (!String.IsNullOrEmpty(ViewBag.SuccessMessage))
                {
                    @ViewBag.SuccessMessage
                }
            </div>

            <div class="panel-body">

                <div class="panel">
                    @using (Html.BeginForm("EditAttributeRule", "AttributeRule", FormMethod.Post, new { @class = "form-horizontal" }))
                    {
                        @Html.HiddenFor(model => model.AttributeRuleID)
                        <div class="form-group">
                            <label class="col-lg-3 control-label"> Attribute Rule Label</label>
                            <div class="col-lg-7">
                                @Html.TextBoxFor(model => model.AttributeLabel, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.AttributeLabel)
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-lg-3 control-label"> Attribute Type</label>
                            <div class="col-lg-7">
                                @Html.DropDownListFor(model => model.AttributeTypeID, Model.DDLAttributeType, "--Select--", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.AttributeTypeID)
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-lg-3 control-label"> Attribute Rule Type</label>
                            <div class="col-lg-7">
                                @Html.DropDownListFor(model => model.AttributeRuleTypeID, Model.DDLAttributeRuleType, "--Select--", new { @class = "form-control", @onchange = "TypeChange(this.value);" })
                                @Html.ValidationMessageFor(model => model.AttributeRuleTypeID)
                            </div>
                        </div>

                        <div class="form-group" id="ListAreaValue" style="display:none">
                            <label class="col-lg-3 control-label">Attribte List<br /><small style="color:#FF0000;">(Comma separated values)</small></label>
                            <div class="col-lg-7">

                                @Html.TextAreaFor(model => model.ListAreaText, new { @class = "form-control" })
                            </div>
                        </div>

                        <div id="ListMinMaxValue" style="display:none">

                            <div class="form-group">
                                <label class="col-lg-3 control-label"> Min Value<span class="redy"> *</span></label>
                                <div class="col-lg-7">

                                    @Html.TextBoxFor(model => model.MinValue, new { @class = "form-control numeric" })
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="col-lg-3 control-label"> Max Value<span class="redy"> *</span></label>
                                <div class="col-lg-7">

                                    @Html.TextBoxFor(model => model.MaxValue, new { @class = "form-control numeric" })
                                </div>
                            </div>

                        </div>

                        <div class="form-group" id="Listemail" style="display:none">
                            <label class="col-lg-3 control-label">Constraint Value<span class="redy"> *</span></label>
                            <div class="col-lg-7">

                                @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Email)

                            </div>
                        </div>
                        <div class="form-group" id="Listsms" style="display:none">
                            <label class="col-lg-3 control-label">Constraint Value<span class="redy"> *</span></label>
                            <div class="col-lg-7">

                                @Html.TextBoxFor(model => model.Sms, new { @class = "form-control numeric" })
                                @Html.ValidationMessageFor(model => model.Sms)
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-lg-offset-3 col-lg-9">
                                <input type="submit" value="Submit" class="btn btn-primary" onclick="return CheckMinMaxValue();" />
                                @Html.ActionLink("Cancel", "Index", "AttributeRule", new { }, new { @class = "btn btn-danger" })
                            </div>
                        </div>

                    }
                </div>
            </div>

        </section>
    </div>
</div>

@section Scripts
{
    <script>
         fnSelectMenuActive('manageattribute', '');

        //   var attruleID=@Model.AttributeRuleTypeID
         @if(Model.AttributeRuleTypeID == 1){
             <text>$('#ListAreaValue').show();</text>
         }
        else if(Model.AttributeRuleTypeID == 2){
              <text>$('#ListMinMaxValue').show();</text>
           }
        else if(Model.AttributeRuleTypeID == 3){
               <text>$('#Listemail').show();</text>
             }
        else{
                  <text>$('#Listsms').show();</text>
               }

        function TypeChange(typevalue) {

            if (typevalue == 1) {
                $('#ListAreaValue').show();
                $('#ListMinMaxValue').hide();
                $('#Listemail').hide();
                $('#Listsms').hide();
            }
            else if (typevalue == 2) {
                $('#ListMinMaxValue').show();
                $('#ListAreaValue').hide();
                $('#Listemail').hide();
                $('#Listsms').hide();
            }
            else if (typevalue == 3) {
                $('#Listemail').show();
                $('#ListAreaValue').hide();
                $('#ListMinMaxValue').hide();
                $('#Listsms').hide();
            }
            else if (typevalue == 4) {
                $('#Listsms').show();
                $('#ListAreaValue').hide();
                $('#ListMinMaxValue').hide();
                $('#Listemail').hide();
            }

        }
        function TypeChanges() {
            $('#ListAreaValue').hide();
            $('#ListMinMaxValue').hide();
            $('#Listemail').hide();
            $('#Listsms').hide();
        }

        $(function () {
            var limit = 10;

            $('#Sms').keyup(function () {
                var len = $(this).val().length;
                if (len > limit) {
                    this.value = this.value.substring(0, limit);
                }

            });
        });


        function Checkphonenolimit(evt) {
            evt = (evt) ? evt : window.event;
            var charCode = (evt.which) ? evt.which : evt.keyCode;
            if (charCode > 31 && (charCode < 48 || charCode > 57)) {
                return false;
            }
            return true;
        }

        function validateEmail(email) {
            var re = /[A-Z0-9._%+-]+@@[A-Z0-9.-]+.[A-Z]{2,4}/igm;
            if (!re.test(email)) {
                alert('Please enter a valid email address.');
                return false;
            }
            return true;
        }
        function CheckMinMaxValue() {
            if (parseInt($('#MaxValue').val()) < parseInt($('#MinValue').val())) {
                alert("Invalid Input at max, min");
                return false;
            }
        }


    </script>

}